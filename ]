package cmd

import (
	"crypto/ed25519"
	"encoding/hex"
	"fmt"

	"github.com/spf13/cobra"
	"github.com/stakecore/cardano-wallet-go/internal/bech32"
)

// helloCmd represents the hello command
var helloCmd = &cobra.Command{
	Use:   "hello",
	Short: "A brief description of your command",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("hello called")

		rootKey := "root_xsk1spewah0xnqc5lk4hxcpunlmyv76naz69kwm9nvpjzal8fepwye8mu222f0pq39wam0mqf3wgk28xvjl3rn0fheuql272wp2qlgu88tmzjmjfckn90lf52l8cfysy66k53dt2dzqjusmzmkk7tfltq4grku60xxg2"
		hrp, decoded, err := bech32.DecodeToBase256(rootKey)
		if err != nil {
			fmt.Println("Error:", err)
		}

		fmt.Println("Hrp:", hrp)
		fmt.Println("Data:", hex.EncodeToString(decoded))
		fmt.Println("Data length:", len(decoded))

		rootKey2, _ := bech32.EncodeFromBase256("root_xsk", decoded)
		fmt.Println("Encoded again:", rootKey2)

		kp, _ := NewKeyPair()

		fmt.Println("New key pair", kp)

		message := []byte{0xFF, 0x00}
		sig := kp.Sign(message)
		verified := kp.Verify(message, sig)

		fmt.Println("Signature and state: ", sig, verified)
	},
}

type KeyPair struct {
	Priv      []byte
	Pub       []byte
	ChainCode []byte
}

func NewKeyPair() (KeyPair, error) {
	kp := KeyPair{Priv: make([]byte, 32), Pub: make([]byte, 32)}

	pub, priv, err := ed25519.GenerateKey(nil)
	if err != nil {
		return KeyPair{}, nil
	}

	copy(kp.Pub, pub)
	copy(kp.Priv, priv[:32])

	return kp, nil
}

func (kp *KeyPair) Sign(message []byte) []byte {
	priv := make([]byte, 64)

	copy(priv[:32], kp.Priv)
	copy(priv[32:], kp.Pub)

	return ed25519.Sign(ed25519.PrivateKey(priv), message)
}

func (kp *KeyPair) Verify(message, sig []byte) bool {
	return ed25519.Verify(kp.Pub, message, sig)
}

func init() {
	rootCmd.AddCommand(helloCmd)
}
